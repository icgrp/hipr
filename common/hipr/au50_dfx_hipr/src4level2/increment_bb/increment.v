// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="increment_increment,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.147000,HLS_SYN_LAT=1106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1464,HLS_SYN_LUT=607,HLS_VERSION=2022_1}" *)

module increment_bb (
        ap_clk,
        ap_rst_n,
        input1_TDATA,
        input1_TVALID,
        input1_TREADY,
        input1_TKEEP,
        input1_TSTRB,
        input1_TLAST,
        output1_TDATA,
        output1_TVALID,
        output1_TREADY,
        output1_TKEEP,
        output1_TSTRB,
        output1_TLAST,
        input2_TDATA,
        input2_TVALID,
        input2_TREADY,
        input2_TKEEP,
        input2_TSTRB,
        input2_TLAST,
        output2_TDATA,
        output2_TVALID,
        output2_TREADY,
        output2_TKEEP,
        output2_TSTRB,
        output2_TLAST,
        input3_TDATA,
        input3_TVALID,
        input3_TREADY,
        input3_TKEEP,
        input3_TSTRB,
        input3_TLAST,
        output3_TDATA,
        output3_TVALID,
        output3_TREADY,
        output3_TKEEP,
        output3_TSTRB,
        output3_TLAST
);

input   ap_clk;
input   ap_rst_n;
input  [63:0] input1_TDATA;
input   input1_TVALID;
output   input1_TREADY;
input  [7:0] input1_TKEEP;
input  [7:0] input1_TSTRB;
input  [0:0] input1_TLAST;
output  [63:0] output1_TDATA;
output   output1_TVALID;
input   output1_TREADY;
output  [7:0] output1_TKEEP;
output  [7:0] output1_TSTRB;
output  [0:0] output1_TLAST;
input  [511:0] input2_TDATA;
input   input2_TVALID;
output   input2_TREADY;
input  [63:0] input2_TKEEP;
input  [63:0] input2_TSTRB;
input  [0:0] input2_TLAST;
output  [511:0] output2_TDATA;
output   output2_TVALID;
input   output2_TREADY;
output  [63:0] output2_TKEEP;
output  [63:0] output2_TSTRB;
output  [0:0] output2_TLAST;
input  [31:0] input3_TDATA;
input   input3_TVALID;
output   input3_TREADY;
input  [3:0] input3_TKEEP;
input  [3:0] input3_TSTRB;
input  [0:0] input3_TLAST;
output  [31:0] output3_TDATA;
output   output3_TVALID;
input   output3_TREADY;
output  [3:0] output3_TKEEP;
output  [3:0] output3_TSTRB;
output  [0:0] output3_TLAST;

wire ap_rst_n_inv;

assign ap_rst_n_inv = ~ap_rst_n;
assign output1_TKEEP = {8{1'b1}};
assign output1_TSTRB = {8{1'b1}};
assign output1_TLAST = 1'b0;

assign output2_TKEEP = {64{1'b1}};
assign output2_TSTRB = {64{1'b1}};
assign output2_TLAST = 1'b0;

assign output3_TKEEP = {4{1'b1}};
assign output3_TSTRB = {4{1'b1}};
assign output3_TLAST = 1'b0;

reg mono_start;

data_copy64 i1(
    .ap_clk          (ap_clk        )
  , .ap_rst_n        (ap_rst_n      )
  , .ap_start        (1'b1          )
  , .ap_done         (              )
  , .ap_idle         (              )
  , .ap_ready        (              )
  , .Input_1_TDATA   (input1_TDATA  )
  , .Input_1_TVALID  (input1_TVALID )
  , .Input_1_TREADY  (input1_TREADY )
  , .Output_1_TDATA  (output1_TDATA )
  , .Output_1_TVALID (output1_TVALID)
  , .Output_1_TREADY (output1_TREADY)
);

always@(posedge ap_clk) begin
  if(!ap_rst_n) begin
    mono_start <= 0;
  end else begin
    if(input1_TVALID && input1_TREADY && input1_TDATA == 64'hffff_ffff_ffff_ffff) begin
      mono_start <= 1'b1;
    end else begin
      mono_start <= mono_start;
    end
  end
end

mono mono_inst(
    .ap_clk            (ap_clk        )
  , .ap_rst_n          (ap_rst_n      )
  , .Input_1_TDATA   (input2_TDATA  )
  , .Input_1_TVALID  (input2_TVALID )
  , .Input_1_TREADY  (input2_TREADY )
  , .Output_1_TDATA  (output2_TDATA )
  , .Output_1_TVALID (output2_TVALID)
  , .Output_1_TREADY (output2_TREADY)
  , .ap_start          (mono_start    )
);


data_copy32 i3(
    .ap_clk          (ap_clk        )
  , .ap_rst_n        (ap_rst_n      )
  , .ap_start        (1'b1          )
  , .ap_done         ()
  , .ap_idle         ()
  , .ap_ready        ()
  , .Input_1_TDATA   (input3_TDATA  )
  , .Input_1_TVALID  (input3_TVALID )
  , .Input_1_TREADY  (input3_TREADY )
  , .Output_1_TDATA  (output3_TDATA )
  , .Output_1_TVALID (output3_TVALID)
  , .Output_1_TREADY (output3_TREADY)
);





endmodule





